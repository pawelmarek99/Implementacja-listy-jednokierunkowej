#include <iostream>

//  element listy
struct Node {
    int data;       // dane przechowywane w komorce
    Node* next;     // wskaznik na next komorke

    // konstruktor, startuje element
    Node(int val) : data(val), next(nullptr) {}
};

// klasa listy jednokierunkowej
class LinkedList {
private:
    Node* head; // wskaźnik na głowe/koniec listy

public:
    // koonstruktor, inicjalizuje liste
    LinkedList() : head(nullptr) {}

    // metoda dodajaca nowy element na koniec listy
    void append(int val) {
        Node* newNode = new Node(val);

        if (head == nullptr) {
            head = newNode;  // jeśli lista jest pusta, nowy element staje się głowa listy
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;  // przechodzenie do konca listy
            }
            current->next = newNode;  // dodawanie nowego elementu na koniec listy
        }
    }

    // metoda wyswietlajaca zawartosc listy
    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList myList;

    myList.append(45);
    myList.append(34);
    myList.append(59);

    std::cout << "Lista: ";
    myList.display();

    return 0;
}
